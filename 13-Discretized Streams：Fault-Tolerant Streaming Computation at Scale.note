问题: 流处理系统中的faults, stragglers的快速处理. 当时的容错机制要么基于副本 (2x硬件资源), 要么基于上游备份 (线性恢复, 慢), 且两者都没有处理stragglers.

大规模系统的两个主要问题: 
	a) faults.
	b) stragglers.

实现: 
	a) 采用微批处理, 利用批处理的fault & straggler tolerent机制, 解决流处理系统的痛点.
	b) 尽量降低微批处理带来的延迟, 使用RDDs (内存中的数据) 作为job间传递的单位 (Hadoop等传递的是磁盘中的数据).
	c) 流处理中每个算子是long-lived且stateful (例如维护一个count表) 的, 其中算子状态的副本同步很麻烦. 微批处理把计算状态存在RDDs中, 使得计算无状态且确定.
	d) 确定性允许RDDs的恢复依赖于lineage graph (RDDs的生成过程), 恢复时各节点依据lineage graph并行恢复丢失的RDDs (checkpoint间隔30s下1-2s恢复).

对无序的输入要么等待一段时间, 要么用户自己在代码中处理 (如在代码中检查晚到的数据, 处理这些并更新之前batch的结果).
