问题: Flink, Naiad延迟低, 但容错差 (基于checkpoint, 一个节点出错所有节点回滚); Spark Streaming, FlumeJava延迟高, 但容错好 (基于BSP模型, 每个barrier阶段均可检查, 处理错误). 所以需要一个在两方面都完善的解决方案.

流处理需关注: 
	a) 高吞吐 (Twitter 28亿/min).
	b) 低延迟 (ms级, 微批处理中batch的时间跨度约为0.5s或更多).
	c) 适应性.
	d) 一致性 (底层: exactly once delivery).

实现:
	a) 基于BSP模型, 容错好, 但需要解决shceduling and communication overheads.
	b) group scheduling: 在流处理中调度结果基本不变, 所以对于多个micro-batch可以一起使用相同的方案调度 (需要等多个micro-batch到达后一起调度?).
	c) pre-scheduling shuffles: 先启动下游任务, 再在调度上游任务时告诉上游任务它的下游是谁, 从而使得上游完成后可直接通知下游执行 (依照什么pre-schedule?).
	d) automatically selecting group size: 统计调度, 协作时间占总时间的比例, 参照TCP协议中的AIMD算法调整group size.
