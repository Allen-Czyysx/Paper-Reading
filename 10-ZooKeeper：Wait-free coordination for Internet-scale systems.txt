目标: 通用的分布式应用的协调模块, 负责如: 动态参数管理, 选主, 锁.

贡献:
	1 编程接口: 与其他做法不同, 给用户更高的灵活性, 而不受限于指定的一些primitive.
	2 读优化: (负载主要是读) 客户将数据缓存在本地, 并系统中读直接访问本地DB. 客户可以监视数据的更新 (数据更新通知客户).
	3 写优化: wait-free, 用监视机制更新客户缓存. Chubby每次修改前都先修改客户缓存, 慢客户会拖累快客户.
	4 协作功能需求: 相同客户操作FIFO, 可串行化写.

数据抽象:
	1 数据模型: 文件系统 (便于组织, 使用), 每个文件是一个znode (默认1MB).
	2 Znode: 数据基本单位. 除znode的值外, 还维护znode的版本号.

实现:
	1 架构: 主从结构, 但每个节点都负责接收请求.
	2 读: 直接访问本地的副本数据库 (保存了全部znode).
	3 写: 接收请求的server阻塞其他操作 (包括读, 从而保证相同客户操作FIFO), leader根据Zab (quorum协议) 执行所有写 (保证可串行化写).
	4 幂等: 写请求会被转化为txn, 其中包括写后的版本. 执行后会检验版本号, 从而避免重复发送txn带来的错误.
	5 容错: WAL记录写请求, snapshot不暂停服务地遍历znode写入磁盘 (原子的?, 但状态可能不正确). 恢复时leader从snapshot开始重新发送请求.
	6 Exactly once: at least once由WAL记录请求保证; at most once由幂等性保证.
	7 Client连接: server和client分别维护最新的zxid (txn id), server＜client则需要连接更新的server.
