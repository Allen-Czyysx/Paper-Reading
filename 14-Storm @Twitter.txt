目标: 分布式流处理系统.
	a) 可扩展: 在不影响正在进行的流处理的基础上, 可轻松添加或移除节点.
	b) 弹性: 在出现节点失效时能继续处理当前的流, 并最小化对性能的影响.
	c) 延伸性: 可以调用任意的外部函数.
	d) 高效性.
	e) 易于管理: 运维需要管理工具 (如预警) 来快速处理问题.

系统结构: 一个Nimbus (调度, 监管), 多个Zookeeper (存储state, topology), 多个Worker (执行), 一个Worker里多个worker process (每个负责一个topology的一部分), 一个worker process里多个executor (每个负责多个task, 即算子实例).

实现:
	a) 可扩展没讲?
	b) 弹性: Nimbus挂掉后仍通过Zookeeper执行完当前数据, 但用户无法再与Storm交互; Worker挂掉后由Nimbus负责恢复, 若Nimbus也挂掉则系统崩溃. (弱)
	c) 延伸性: 支持Thrift.

流处理系统大部分不支持声明式查询语言.

Storm支持有环的topology.

确认机制保证at least once, 禁用确认机制保证at most once (无法保证exactly once).
