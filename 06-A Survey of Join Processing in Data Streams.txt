流处理和关系数据库上join的不同:
	a) 输入连续, 输出也要连续, blocking operation不能使用. ☆☆☆☆☆
	b) 输入数据没有被事先存储或建立索引过.
	c) 数据是无穷的, 传统的查询优化不适用.
	d) 流处理需要应对数据的变和波动.
	e) unwindowed: 与历史数据join; windowed: window之间join. ☆☆☆☆☆

join类别:
	a) unwindowed: 输出递增, 挑战在于与大量历史数据join.
	b) time-based window: 输出弱递增 (可通过检查时间戳简单实现删除操作).
	c) tuple-based window: 输出不递增, 挑战在于如何实现对输出的删除.
	d) between streams and database relations.


state management:
	a) hard constraints: k-constraints; punctuations.
	b) soft constraints: // TODO

算法:
	a) SHJ: pipelined hash join, hash表需要在内存中.
	b) XJoin, DPHJ: 允许把部分hash表放在硬盘中.
	c) RPJ: 使用statistics选择flushing strategy.
	d) PMJ: 非阻塞的sort-merge join, 先把input分成成对的几小份join, 再在整体上join.
	e) MJoin: 处理multi-way join, 对到达的tuple, 先插入hash表, 再去其他stream的hash表上probe; 而不是 (S1 J S2) J S3.

issues:
	a) fine-grained state management: flush tuples instead of hash partitions.
	b) 把已刷入磁盘的tuple刷回内存是否有益.
	c) 为RPJ寻找更优的统计策略.
