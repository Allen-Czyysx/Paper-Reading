目标: 向分布式系统提供粗粒度锁 (锁的持续时间以小时为单位) 服务和一个小容量的文件系统, 注重高可用高可靠而非高性能.

要求:
	1 上千个客户查看一个文件 (用较少的server).
	2 事件通知机制.
	3 客户本地缓存数据 (且与系统强一致), 应对频繁轮询.
	4 安全机制 (如权限控制).

设计:
	1 架构: 一个master负责处理所有请求, 其余节点仅作副本防止master挂掉.
	2 Node: 数据抽象的基本单位, 包含值, 版本号等信息.
	3 锁: 分布式锁问题. 简易锁 (通用但不灵活), 获得时设置延迟时间; 完美锁 (不通用), 获得时申请sequencer (包含锁版本), 所有操作须提供sequencer, 根据锁版本判断 (ZooKeeper用session解决?).
	4 caching: master维护有cache的client, 写数据时先无效化所有client的cache (通知或租约到期), 再写 (问题是在无效化后master负载过重).
	5 提供文件修改通知.
