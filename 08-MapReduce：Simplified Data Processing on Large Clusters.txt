目标: 对数据量巨大, 需要用集群进行处理的场景, 提出一个编程模型, 向用户隐藏并行细节, 容错等, 并能实现大规模的并行执行.

模型: 
	1) Map: 输入一个KV对, 转换为多个KV对作为中间结果输出.
	2) Reduce: 输入一个key和对应的多个value, 合并为一个更小的value集输出.

实现:
	1) Locality: master会尽量把map任务交给在本地有数据的节点, 减少网络IO.
	2) Backup task: 在MapReduce任务即将完成时, 将剩余任务复制一份交给系统执行, 以免个别极慢的task影响整个任务的执行.
	3) 容错: master通过心跳检测worker是否故障, 故障时将未完成任务重新分配. 重新调度的结果与正常执行的相同, 由任务的原子提交保证 (map由master保证, reduce通过原子地将结果重命名来保证).
