目标: Hadoop痛点在于编程模型单一且可扩展性差, 故提出资源管理系统Yarn, 解耦编程模型和资源管理模块 (将job调度执行交给下层应用).

需求:
	1 可扩展.
	2 多租户.
	3 服务化: 即模块解耦, 因为HoD无法跟进Hadoop的更新, 所以不如在Hadoop上层开发一个系统.
	4 对locality的感知.
	5 集群资源的高利用 (如用户申请过多节点和长时间不释放).
	6 高可靠性/高可用性.
	7 安全, 可审查算子: 隔离多租户的数据.
	8 支持多样的编程模型.
	9 弹性的资源模型.
	10 向后兼容.

架构:
	1 ResourceManager: 一个RM, 接收请求, 做安全验证 (R7), 交给AM处理.
	2 NodeManager: 多个NM, 监管各自节点状态, 与RM维持心跳.
	3 ApplicationMaster: 每个job一个AM, 负责向RM动态申请资源 (请求包含locality等信息) (R4, R9), 执行job (包括如容错, locality优化等), 下压应用相关工作给AM提升了可扩展性 (R1), 并支持灵活的编程模型 (R8) 和之后的更新 (R3).
